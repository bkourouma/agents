-- =============================================
-- INSURANCE COMPANY DATABASE SCHEMA
-- =============================================

-- Customer Information
CREATE TABLE customers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_number VARCHAR(20) UNIQUE NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),
    date_of_birth DATE,
    gender VARCHAR(10),
    occupation VARCHAR(100),
    annual_income DECIMAL(15,2),
    marital_status VARCHAR(20),
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100),
    customer_type VARCHAR(20) DEFAULT 'individual', -- individual, business
    risk_profile VARCHAR(20) DEFAULT 'medium', -- low, medium, high
    preferred_language VARCHAR(10) DEFAULT 'en',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT true,
    kyc_status VARCHAR(20) DEFAULT 'pending', -- pending, verified, rejected
    customer_notes TEXT
);

-- Product Categories
CREATE TABLE product_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insurance Products
CREATE TABLE insurance_products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    product_code VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(200) NOT NULL,
    category_id UUID REFERENCES product_categories(id),
    description TEXT,
    product_type VARCHAR(50) NOT NULL, -- life, health, auto, home, business
    coverage_type VARCHAR(50), -- term, whole, universal, liability, comprehensive
    min_coverage_amount DECIMAL(15,2),
    max_coverage_amount DECIMAL(15,2),
    min_age INTEGER,
    max_age INTEGER,
    waiting_period_days INTEGER DEFAULT 0,
    policy_term_years INTEGER,
    renewable BOOLEAN DEFAULT true,
    is_active BOOLEAN DEFAULT true,
    requires_medical_exam BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Product Features and Benefits
CREATE TABLE product_features (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    product_id UUID REFERENCES insurance_products(id),
    feature_name VARCHAR(200) NOT NULL,
    description TEXT,
    feature_type VARCHAR(50), -- coverage, benefit, exclusion, condition
    is_standard BOOLEAN DEFAULT true, -- true for standard, false for optional
    additional_premium_percentage DECIMAL(5,2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Pricing Factors and Conditions
CREATE TABLE pricing_factors (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    product_id UUID REFERENCES insurance_products(id),
    factor_name VARCHAR(100) NOT NULL, -- age, gender, health, location, etc.
    factor_type VARCHAR(50), -- age_group, gender, health_condition, location
    factor_value VARCHAR(100), -- 25-35, male, smoker, urban, etc.
    multiplier DECIMAL(5,4) DEFAULT 1.0000, -- pricing multiplier
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Base Pricing Tiers
CREATE TABLE pricing_tiers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    product_id UUID REFERENCES insurance_products(id),
    tier_name VARCHAR(100) NOT NULL,
    coverage_amount DECIMAL(15,2) NOT NULL,
    base_premium DECIMAL(10,2) NOT NULL,
    premium_frequency VARCHAR(20) DEFAULT 'monthly', -- monthly, quarterly, semi-annual, annual
    currency VARCHAR(10) DEFAULT 'USD',
    effective_date DATE DEFAULT CURRENT_DATE,
    expiry_date DATE,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Orders/Applications
CREATE TABLE insurance_orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_number VARCHAR(50) UNIQUE NOT NULL,
    customer_id UUID REFERENCES customers(id),
    product_id UUID REFERENCES insurance_products(id),
    order_status VARCHAR(30) DEFAULT 'draft', -- draft, submitted, under_review, approved, rejected, cancelled
    coverage_amount DECIMAL(15,2) NOT NULL,
    premium_amount DECIMAL(10,2) NOT NULL,
    premium_frequency VARCHAR(20) DEFAULT 'monthly',
    payment_method VARCHAR(50),
    application_date DATE DEFAULT CURRENT_DATE,
    effective_date DATE,
    expiry_date DATE,
    assigned_agent_id UUID, -- customer service agent handling the order
    underwriter_id UUID, -- underwriter assigned
    medical_exam_required BOOLEAN DEFAULT false,
    medical_exam_completed BOOLEAN DEFAULT false,
    medical_exam_date DATE,
    documents_received BOOLEAN DEFAULT false,
    approval_date DATE,
    rejection_reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    notes TEXT -- internal notes for customer service
);

-- Order Status History
CREATE TABLE order_status_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID REFERENCES insurance_orders(id),
    previous_status VARCHAR(30),
    new_status VARCHAR(30),
    changed_by UUID, -- user who made the change
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    reason TEXT,
    notes TEXT
);

-- Additional Order Details/Riders
CREATE TABLE order_riders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID REFERENCES insurance_orders(id),
    rider_name VARCHAR(200) NOT NULL,
    rider_type VARCHAR(50), -- accidental_death, disability, critical_illness
    coverage_amount DECIMAL(15,2),
    additional_premium DECIMAL(10,2),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insurance Contracts (Policies)
CREATE TABLE insurance_contracts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    policy_number VARCHAR(50) UNIQUE NOT NULL,
    order_id UUID REFERENCES insurance_orders(id),
    customer_id UUID REFERENCES customers(id),
    product_id UUID REFERENCES insurance_products(id),
    contract_status VARCHAR(30) DEFAULT 'active', -- active, suspended, lapsed, cancelled, expired, claimed
    coverage_amount DECIMAL(15,2) NOT NULL,
    premium_amount DECIMAL(10,2) NOT NULL,
    premium_frequency VARCHAR(20),
    issue_date DATE NOT NULL,
    effective_date DATE NOT NULL,
    expiry_date DATE,
    next_renewal_date DATE,
    cash_value DECIMAL(15,2) DEFAULT 0, -- for whole life policies
    surrender_value DECIMAL(15,2) DEFAULT 0,
    loan_value DECIMAL(15,2) DEFAULT 0,
    auto_renewal BOOLEAN DEFAULT true,
    grace_period_days INTEGER DEFAULT 30,
    last_premium_paid_date DATE,
    next_premium_due_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Contract Beneficiaries
CREATE TABLE contract_beneficiaries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    contract_id UUID REFERENCES insurance_contracts(id),
    beneficiary_type VARCHAR(20) DEFAULT 'primary', -- primary, contingent
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    relationship VARCHAR(50),
    percentage DECIMAL(5,2) DEFAULT 100.00,
    date_of_birth DATE,
    address TEXT,
    phone VARCHAR(20),
    email VARCHAR(255),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Premium Payment History
CREATE TABLE premium_payments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    contract_id UUID REFERENCES insurance_contracts(id),
    payment_date DATE NOT NULL,
    due_date DATE NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50),
    payment_status VARCHAR(20) DEFAULT 'pending', -- pending, completed, failed, refunded
    transaction_id VARCHAR(100),
    late_fee DECIMAL(10,2) DEFAULT 0,
    grace_period_used BOOLEAN DEFAULT false,
    processed_by UUID, -- staff member who processed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Claims Management
CREATE TABLE insurance_claims (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    claim_number VARCHAR(50) UNIQUE NOT NULL,
    contract_id UUID REFERENCES insurance_contracts(id),
    customer_id UUID REFERENCES customers(id),
    claim_type VARCHAR(50), -- death, disability, health, accident, etc.
    claim_amount DECIMAL(15,2) NOT NULL,
    claim_status VARCHAR(30) DEFAULT 'submitted', -- submitted, investigating, approved, rejected, paid, closed
    incident_date DATE NOT NULL,
    report_date DATE DEFAULT CURRENT_DATE,
    description TEXT,
    assigned_adjuster_id UUID,
    investigation_notes TEXT,
    approval_amount DECIMAL(15,2),
    rejection_reason TEXT,
    payment_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Customer Service Interactions
CREATE TABLE customer_interactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(id),
    agent_id UUID, -- customer service agent
    interaction_type VARCHAR(50), -- call, email, chat, visit
    interaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    subject VARCHAR(200),
    description TEXT,
    resolution TEXT,
    status VARCHAR(20) DEFAULT 'open', -- open, resolved, escalated
    priority VARCHAR(20) DEFAULT 'medium', -- low, medium, high, urgent
    related_contract_id UUID REFERENCES insurance_contracts(id),
    related_order_id UUID REFERENCES insurance_orders(id),
    related_claim_id UUID REFERENCES insurance_claims(id),
    follow_up_required BOOLEAN DEFAULT false,
    follow_up_date DATE,
    satisfaction_rating INTEGER CHECK (satisfaction_rating >= 1 AND satisfaction_rating <= 5),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Document Management
CREATE TABLE customer_documents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(id),
    contract_id UUID REFERENCES insurance_contracts(id),
    order_id UUID REFERENCES insurance_orders(id),
    document_type VARCHAR(50), -- application, medical_report, id_proof, income_proof, claim_form
    document_name VARCHAR(200),
    file_path VARCHAR(500),
    file_size INTEGER,
    mime_type VARCHAR(100),
    uploaded_by UUID,
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_verified BOOLEAN DEFAULT false,
    verified_by UUID,
    verification_date TIMESTAMP,
    expiry_date DATE, -- for documents that expire
    notes TEXT
);

-- Renewal Reminders and Notifications
CREATE TABLE renewal_notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    contract_id UUID REFERENCES insurance_contracts(id),
    customer_id UUID REFERENCES customers(id),
    notification_type VARCHAR(50), -- renewal_reminder, payment_due, policy_expiry
    notification_method VARCHAR(20), -- email, sms, mail, call
    scheduled_date DATE NOT NULL,
    sent_date TIMESTAMP,
    status VARCHAR(20) DEFAULT 'pending', -- pending, sent, failed, cancelled
    message_content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Product Comparison Log (for customer service)
CREATE TABLE product_comparisons (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(id),
    agent_id UUID,
    comparison_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    products_compared UUID[], -- array of product IDs
    notes TEXT,
    recommendation TEXT,
    result VARCHAR(50) -- quote_provided, order_created, no_action, follow_up
);

-- System Users (Agents, Underwriters, etc.)
CREATE TABLE system_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    role VARCHAR(50) NOT NULL, -- agent, underwriter, manager, admin
    department VARCHAR(100),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP
);

-- =============================================
-- INDEXES for Performance
-- =============================================

-- Customer indexes
CREATE INDEX idx_customers_email ON customers(email);
CREATE INDEX idx_customers_phone ON customers(phone);
CREATE INDEX idx_customers_customer_number ON customers(customer_number);

-- Product indexes
CREATE INDEX idx_insurance_products_product_code ON insurance_products(product_code);
CREATE INDEX idx_insurance_products_category ON insurance_products(category_id);
CREATE INDEX idx_insurance_products_type ON insurance_products(product_type);

-- Order indexes
CREATE INDEX idx_insurance_orders_customer ON insurance_orders(customer_id);
CREATE INDEX idx_insurance_orders_status ON insurance_orders(order_status);
CREATE INDEX idx_insurance_orders_number ON insurance_orders(order_number);
CREATE INDEX idx_insurance_orders_date ON insurance_orders(application_date);

-- Contract indexes
CREATE INDEX idx_insurance_contracts_policy_number ON insurance_contracts(policy_number);
CREATE INDEX idx_insurance_contracts_customer ON insurance_contracts(customer_id);
CREATE INDEX idx_insurance_contracts_status ON insurance_contracts(contract_status);
CREATE INDEX idx_insurance_contracts_expiry ON insurance_contracts(expiry_date);
CREATE INDEX idx_insurance_contracts_renewal ON insurance_contracts(next_renewal_date);

-- Payment indexes
CREATE INDEX idx_premium_payments_contract ON premium_payments(contract_id);
CREATE INDEX idx_premium_payments_due_date ON premium_payments(due_date);
CREATE INDEX idx_premium_payments_status ON premium_payments(payment_status);

-- Claims indexes
CREATE INDEX idx_insurance_claims_contract ON insurance_claims(contract_id);
CREATE INDEX idx_insurance_claims_customer ON insurance_claims(customer_id);
CREATE INDEX idx_insurance_claims_status ON insurance_claims(claim_status);
CREATE INDEX idx_insurance_claims_number ON insurance_claims(claim_number);

-- Interaction indexes
CREATE INDEX idx_customer_interactions_customer ON customer_interactions(customer_id);
CREATE INDEX idx_customer_interactions_agent ON customer_interactions(agent_id);
CREATE INDEX idx_customer_interactions_date ON customer_interactions(interaction_date);
CREATE INDEX idx_customer_interactions_status ON customer_interactions(status);